-- 27번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT C.NAME, O.SALEPRICE
FROM   CUSTOMER C 
       ,ORDERS O 
WHERE C.CUSTID=O.CUSTID(+);
-- 부족한 부분에 (+)

SELECT C.NAME, O.SALEPRICE
FROM   CUSTOMER C 
LEFT OUTER JOIN   ORDERS O 
ON C.CUSTID=O.CUSTID;

-- 28번
SELECT BOOKNAME 
FROM BOOK
WHERE PRICE = (SELECT MAX(PRICE) FROM BOOK);

-- 29번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT * FROM CUSTOMER;

SELECT C.NAME
FROM CUSTOMER C
JOIN ORDERS O
ON C.CUSTID = O.CUSTID
GROUP BY C.NAME;

-- 강사답
SELECT DISTINCT NAME
FROM CUSTOMER
WHERE CUSTID IN (SELECT CUSTID FROM ORDERS);


SELECT DISTINCT NAME
FROM CUSTOMER C
,ORDERS O
WHERE C.CUSTID=O.CUSTID;

-- 30번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT C.NAME
FROM CUSTOMER C
JOIN ORDERS O
ON C.CUSTID=O.CUSTID
JOIN BOOK B
ON B.BOOKID=O.BOOKID
WHERE PUBLISHER ='대한미디어';

SELECT NAME
  FROM CUSTOMER C
 WHERE C.CUSTID IN (
    SELECT O.CUSTID
      FROM ORDERS  O
         , BOOK    B
     WHERE B.BOOKID = O.BOOKID AND B.PUBLISHER = '대한미디어'
);
-- 
SELECT NAME
  FROM CUSTOMER
 WHERE CUSTOMER.CUSTID IN (
    SELECT ORDERS.CUSTID
      FROM ORDERS
     WHERE ORDERS.BOOKID IN (
        SELECT BOOK.BOOKID
          FROM BOOK
         WHERE PUBLISHER = '대한출판사'
    )
);

-- 31번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

-- 출판사별로 출판사의 평균 도서 평균가격보다 비싼도서

SELECT B1.BOOKNAME
FROM   BOOK B1
WHERE PRICE > (SELECT AVG(B2.PRICE)
FROM BOOK B2
WHERE B2.PUBLISHER=B1.PUBLISHER);

-- 강사답
SELECT B1.BOOKNAME
  FROM BOOK B1
     , (
    SELECT PUBLISHER
         , AVG(PRICE) AS PRICE
      FROM BOOK
     GROUP BY PUBLISHER
) B2
 WHERE B1.PUBLISHER = B2.PUBLISHER AND B1.PRICE > B2.PRICE;

SELECT B1.BOOKNAME
  FROM BOOK B1
          , (
    SELECT PUBLISHER
         , AVG(PRICE) AS PRICE
      FROM BOOK
     GROUP BY PUBLISHER
) B2
 WHERE B1.PUBLISHER = B2.PUBLISHER AND B1.PRICE > B2.PRICE;


-- 32번까지
-- 도서를 주문하지 않은 고객의 이름

-- LEFT OUTER JOIN SQL
SELECT C.NAME
FROM CUSTOMER C 
LEFT OUTER JOIN ORDERS O
ON C.CUSTID=O.CUSTID
WHERE O.CUSTID IS NULL;

-- ORACLE SQL
SELECT C.NAME
FROM CUSTOMER C 
, ORDERS O
WHERE C.CUSTID=O.CUSTID(+)
AND O.CUSTID IS NULL;

-- SUBQUERY
SELECT C.NAME
FROM   CUSTOMER C
WHERE  C.CUSTID 
NOT IN (
      SELECT O.CUSTID
      FROM ORDERS O);

-- MINUS OPERATORS
SELECT NAME FROM CUSTOMER
MINUS
SELECT DISTINCT NAME
FROM CUSTOMER C
,ORDERS O
WHERE C.CUSTID=O.CUSTID;

-- not 을 where절에 안쓰는 것이 가독성이 좋음.


-- 33번까지
-- 주문이있는 고객의 이름과 주소를 보이시오
-- ANSI SQL
SELECT C.NAME, C.ADDRESS
FROM   CUSTOMER C
JOIN   ORDERS O
ON     C.CUSTID=O.CUSTID
GROUP BY C.NAME, C.ADDRESS;  

--EXISTS 용법 익히기
SELECT NAME
     , ADDRESS
FROM   CUSTOMER C
WHERE EXISTS (
    SELECT *
      FROM ORDERS O
     WHERE C.CUSTID = O.CUSTID
);


--34번까지
CREATE TABLE NewBook(
     bookid    NUMBER
    ,bookname  VARCHAR2(20)
    ,publisher VARCHAR2(20)
    ,price     NUMBER
);
-- 계산하지 않는 것은 varchar2
-- NUMBER 는 001이 안되기때문


CREATE TABLE NewCustomer(
    custid   NUMBER PRIMARY KEY
    ,name     VARCHAR2(40)
    ,address  VARCHAR2(40)
    ,phone    VARCHAR2(30)
);

CREATE TABLE NewOrders(
    orderid NUMBER PRIMARY KEY
    ,custid NUMBER REFERENCES NewCustomer(custid) ON DELETE CASCADE NOT NULL 
    ,bookid NUMBER NOT NULL
    ,saleprice NUMBER
    ,orderdate DATE
);


ALTER TABLE NEWBOOK DROP COLUMN ISBN;
ROLLBACK;
--37번
-- ADD COLUMN 안붙임 주의 그냥 ADD 하고 칼럼명
ALTER TABLE NewBook ADD isbn VARCHAR2(13);
DESC NewBook;

-- 38번

-- 데이터타입 수정은 MODIFY 칼람명
ALTER TABLE NewBook MODIFY isbn NUMBER;
DESC NewBook;
-- 39번
-- (중요) DROP 할때만 DROP COLUMN 칼람명
ALTER TABLE NewBook DROP COLUMN ISBN;
DESC NewBook;

-- 40번
/*
NOT NULL 제약 조건: 
NOT NULL 제약 조건은 테이블 생성 시 컬럼에 직접 적용하거나 
나중에 ALTER TABLE MODIFY를 사용하여 수정해야 합니다. 
ADD CONSTRAINT를 사용하여 직접 NOT NULL 제약 조건을 추가할 수는 없습니다.

제약 조건 이름: 
제약 조건 이름은 주로 외래 키, 유니크 키, 또는 체크 제약 조건에 사용되며, 
NOT NULL에는 사용되지 않습니다.
*/

ALTER TABLE NewBook
MODIFY (bookid NOT NULL);
-- 41번

ALTER TABLE NewBook
MODIFY (bookid PRIMARY KEY);
-- 42
DROP TABLE NewBook;

--43번
DROP TABLE NewOrders;
DROP TABLE NewCustomer;

--44번
DESC BOOK;

INSERT INTO BOOK(BOOKID,BOOKNAME,PUBLISHER,PRICE)
VALUES(11,'스포츠 의학','한솔의학서적',90000);
COMMIT;
INSERT INTO BOOK(BOOKID,BOOKNAME,PUBLISHER)
VALUES(14,'스포츠 의학','한솔의학서적');
COMMIT;
SELECT * FROM IMPORTED_BOOK;

INSERT INTO BOOK
SELECT * FROM IMPORTED_BOOK;

UPDATE CUSTOMER SET ADDRESS ='대한민국 부산' WHERE CUSTID=5;

UPDATE CUSTOMER
   SET
    ADDRESS = (
        SELECT ADDRESS
          FROM CUSTOMER
         WHERE NAME = '김연아'
    )
 WHERE NAME = '박세리';
 
 COMMIT;
 
SELECT * FROM CUSTOMER;
-- 48번까지
