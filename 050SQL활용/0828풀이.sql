SELECT * FROM BOOK;
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMER;
-- 1-1
SELECT BOOKNAME FROM BOOK WHERE BOOKID=1;

--1-2
SELECT BOOKNAME FROM BOOK WHERE PRICE >= 20000;

--1-3
SELECT SUM(O.SALEPRICE) "총 구매액"
  FROM ORDERS O
 WHERE O.CUSTID IN (
    SELECT C.CUSTID
      FROM CUSTOMER C
     WHERE NAME = '박지성'
);  
--1-4

SELECT COUNT(*) "도서 수"
  FROM ORDERS O
 WHERE O.CUSTID IN (
    SELECT C.CUSTID
      FROM CUSTOMER C
     WHERE NAME = '박지성'
);  

--1-5
SELECT COUNT(DISTINCT(PUBLISHER)) "도서 수"
  FROM BOOK B
  JOIN ORDERS O
  ON B.BOOKID=O.BOOKID
 WHERE O.CUSTID IN (
    SELECT C.CUSTID
      FROM CUSTOMER C
     WHERE NAME = '박지성'
);  

--1-6
SELECT B.BOOKNAME, B.PRICE, B.PRICE-O.SALEPRICE "차이"
FROM   BOOK B JOIN ORDERS O
ON B.BOOKID=O.BOOKID
 WHERE O.CUSTID IN (
    SELECT C.CUSTID
      FROM CUSTOMER C
     WHERE NAME = '박지성'
);  

-- 1-7
SELECT BOOKNAME FROM BOOK
MINUS
SELECT B.BOOKNAME
  FROM BOOK B
  JOIN ORDERS O
  ON B.BOOKID=O.BOOKID
 WHERE O.CUSTID IN (
    SELECT C.CUSTID
      FROM CUSTOMER C
     WHERE NAME = '박지성'
);  

--2-1
SELECT * FROM BOOK;
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMER;

SELECT COUNT(*) FROM BOOK;
--2-2
SELECT COUNT(DISTINCT(PUBLISHER)) FROM BOOK;
--2-3
SELECT DISTINCT(C.NAME)
     , C.ADDRESS
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID;
--2-4
SELECT ORDERID FROM ORDERS
WHERE ORDERDATE >= TO_DATE(20140704,'YYYYMMDD')
AND    ORDERDATE < TO_DATE(20140707,'YYYYMMDD');
--2-5
SELECT ORDERID FROM ORDERS
MINUS
SELECT ORDERID FROM ORDERS
WHERE ORDERDATE >= TO_DATE(20140704,'YYYYMMDD')
AND    ORDERDATE < TO_DATE(20140707,'YYYYMMDD');

--2-6
SELECT * FROM CUSTOMER;

SELECT NAME
     , ADDRESS
  FROM CUSTOMER
 WHERE NAME LIKE '김%';

--2-7
SELECT NAME
     , ADDRESS
  FROM CUSTOMER
 WHERE NAME LIKE '김_아';
--2-8 
SELECT NAME
  FROM CUSTOMER
 WHERE CUSTID NOT IN (
    SELECT CUSTID
      FROM ORDERS
);
--2-9
SELECT * FROM ORDERS;

SELECT SUM(SALEPRICE)
     , AVG(NVL(SALEPRICE, 0))
  FROM ORDERS;

--2-10
SELECT C.NAME
     , SUM(O.SALEPRICE)
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID
 GROUP BY C.NAME;
 
 --2-11
 SELECT C.NAME, B.BOOKNAME 
 FROM CUSTOMER C JOIN ORDERS O
 ON C.CUSTID=O.CUSTID
JOIN BOOK B ON O.BOOKID = B.BOOKID;

--2-12 DIFFICULT

SELECT MAX(B.PRICE-O.SALEPRICE) "차이"
FROM   BOOK B JOIN ORDERS O
ON B.BOOKID=O.BOOKID;


SELECT * FROM ORDERS;

SELECT O.ORDERID FROM BOOK B
JOIN ORDERS O
ON B.BOOKID=O.BOOKID
WHERE B.PRICE-O.SALEPRICE = 
(SELECT MAX(B1.PRICE-O1.SALEPRICE)
FROM BOOK B1 
JOIN ORDERS O1
ON B1.BOOKID=O1.BOOKID
WHERE O1.ORDERID = O.ORDERID);  

SELECT O.ORDERID
     , B.PRICE - O.SALEPRICE AS "차이"
     , ROW_NUMBER() OVER (ORDER BY B.PRICE -O.SALEPRICE DESC) AS RN
  FROM BOOK B
  JOIN ORDERS O ON B.BOOKID = O.BOOKID
 WHERE B.PRICE - O.SALEPRICE = (
    SELECT MAX(B2.PRICE - O2.SALEPRICE)
      FROM BOOK B2
      JOIN ORDERS O2 ON B2.BOOKID = O2.BOOKID
     WHERE O2.ORDERID = O.ORDERID
);

SELECT ORDERID, "차이"
FROM (SELECT O.ORDERID
     , B.PRICE - O.SALEPRICE AS "차이"
     , ROW_NUMBER() OVER (ORDER BY B.PRICE -O.SALEPRICE DESC) AS RN
  FROM BOOK B
  JOIN ORDERS O ON B.BOOKID = O.BOOKID
 WHERE B.PRICE - O.SALEPRICE = (
    SELECT MAX(B2.PRICE - O2.SALEPRICE)
      FROM BOOK B2
      JOIN ORDERS O2 ON B2.BOOKID = O2.BOOKID
     WHERE O2.ORDERID = O.ORDERID
))
WHERE RN=1;

SELECT ORDERID, "차이"
FROM (
    SELECT 
        O.ORDERID, 
        B.PRICE - O.SALEPRICE AS "차이",
        ROW_NUMBER() OVER (ORDER BY B.PRICE - O.SALEPRICE DESC) AS rn
    FROM 
        BOOK B 
    JOIN 
        ORDERS O ON B.BOOKID = O.BOOKID
) 
WHERE rn = 1;



--2-13
SELECT C.NAME
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID
 GROUP BY C.NAME HAVING AVG(NVL(O.SALEPRICE,0)) >
(SELECT
AVG(NVL(O1.SALEPRICE,0)) FROM ORDERS O1);

--3-1
SELECT C.NAME
  FROM CUSTOMER C
JOIN ORDERS O
ON C.CUSTID=O.CUSTID
JOIN BOOK B
ON B.BOOKID=O.BOOKID
WHERE B.PUBLISHER IN(
SELECT PUBLISHER
  FROM BOOK B
  JOIN ORDERS O ON B.BOOKID = O.BOOKID
  JOIN CUSTOMER C ON O.CUSTID=C.CUSTID
  WHERE C.NAME='박지성')
MINUS 
SELECT PUBLISHER
  FROM BOOK B
  JOIN ORDERS O ON B.BOOKID = O.BOOKID
  JOIN CUSTOMER C ON O.CUSTID=C.CUSTID
  WHERE C.NAME='박지성';
  
--3-2
SELECT DISTINCT(C.NAME) FROM CUSTOMER C JOIN ORDERS O
ON C.CUSTID=O.CUSTID
JOIN BOOK B
ON B.BOOKID=O.BOOKID
WHERE C.CUSTID IN (SELECT O2.CUSTID
  FROM ORDERS O2
 GROUP BY O2.CUSTID
HAVING COUNT(O2.BOOKID) > 1);

--3-3
SELECT * FROM ORDERS;
SELECT COUNT(CUSTID)*0.3 FROM CUSTOMER;

SELECT BOOKID, COUNT(CUSTID) FROM ORDERS GROUP BY BOOKID
HAVING COUNT(CUSTID)> (SELECT COUNT(CUSTID)*0.3 FROM CUSTOMER);

SELECT BOOKID, COUNT(CUSTID) FROM ORDERS GROUP BY BOOKID
HAVING COUNT(CUSTID)> (SELECT COUNT(CUSTID)*0.3 FROM CUSTOMER);

SELECT DISTINCT(B.BOOKNAME)
  FROM BOOK B
  JOIN ORDERS O ON B.BOOKID = O.BOOKID
WHERE B.BOOKID IN (SELECT O1.BOOKID FROM ORDERS O1 GROUP BY O1.BOOKID
HAVING COUNT(O1.CUSTID)> (SELECT COUNT(CUSTID)*0.3 FROM CUSTOMER C));
  
--4-1
SELECT * FROM BOOK;
DESC BOOK;

INSERT INTO BOOK(BOOKID,BOOKNAME,PUBLISHER,PRICE) VALUES
('23','스포츠 세계','대한미디어',10000);
COMMIT;
--4-2
DELETE FROM BOOK WHERE PUBLISHER='삼성당';
COMMIT;

DESC ORDERS;
--4-3
DELETE FROM BOOK WHERE PUBLISHER='이상미디어';
-- ORDERS에서 BOOKID로 외래키를 지정해놓았기 때문

--4-4
SELECT * FROM BOOK;

UPDATE BOOK SET PUBLISHER='대한출판사' WHERE PUBLISHER='대한미디어';

COMMIT;

--4-5

CREATE TABLE BOOKCOMPANY(
NAME VARCHAR2(20) PRIMARY KEY
,ADDRESS VARCHAR2(20)
,BEGIN   DATE);

--4-6
ALTER TABLE BOOKCOMPANY 
ADD (WEBADDRESS VARCHAR2(30));

--4-7-
INSERT INTO BOOKCOMPANY(NAME, ADDRESS, BEGIN, WEBADDRESS)
VALUES ('한빛아카데미','서울시 마포구',TO_DATE(19930101,'YYYYMMDD'),'http://hanbit.co.kr');
