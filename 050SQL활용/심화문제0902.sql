--A-5-0

SELECT 
    'OO(주)' AS COMPANY_NAME,         -- 상수값으로 회사 이름을 출력
    EMPLOYEES.FIRST_NAME || ' ' || EMPLOYEES.LAST_NAME AS NAME,   -- 이름과 성을 결합하여 NAME으로 출력
    EMPLOYEES.JOB_ID,                 -- 업무 ID 출력
    DEPARTMENTS.DEPARTMENT_NAME,      -- 부서 이름 출력
    LOCATIONS.CITY                    -- 도시 이름 출력
FROM 
    EMPLOYEES
JOIN 
    DEPARTMENTS
ON 
    EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
JOIN 
    LOCATIONS
ON 
    DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
WHERE 
    LOCATIONS.CITY = 'Oxford';        -- Oxford에서 근무하는 사원 필터링


-- 강사답
SELECT 'OO(주)' AS COMPANY_NAME
       ,E.FIRST_NAME || ' ' || E.LAST_NAME AS NAME
       ,E.JOB_ID
       ,D.DEPARTMENT_NAME
       ,L.CITY
FROM   EMPLOYEES E
       ,DEPARTMENTS D
       ,LOCATIONS L
WHERE E.DEPARTMENT_ID=D.DEPARTMENT_ID
AND   D.LOCATION_ID = L.LOCATION_ID
AND   L.CITY = 'Oxford';     


--A-5-1

SELECT D.DEPARTMENT_NAME, COUNT(E.EMPLOYEE_ID)
FROM   DEPARTMENTS D
JOIN   EMPLOYEES E
ON     D.DEPARTMENT_ID=E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME
HAVING COUNT(E.EMPLOYEE_ID) >=5
ORDER BY 2 DESC;

--강사답
SELECT D.DEPARTMENT_NAME, COUNT(E.EMPLOYEE_ID)
FROM   DEPARTMENTS D
,      EMPLOYEES E
WHERE    D.DEPARTMENT_ID=E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME
HAVING COUNT(E.EMPLOYEE_ID) >=5
ORDER BY 2 DESC;


--A-6-0
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT E1.FIRST_NAME || ' ' || E1.LAST_NAME "NAME"
     , E1.SALARY
     , E1.DEPARTMENT_ID
     , E1.JOB_ID
  FROM EMPLOYEES E1
 WHERE SALARY > (
    SELECT E2.SALARY
      FROM EMPLOYEES E2
     WHERE LAST_NAME = 'TUCKER'
);

--A--6--1
-- JOB ID도 같이 조건 걸것!
SELECT FIRST_NAME || ' ' || LAST_NAME "NAME"
     , JOB_ID
     , SALARY
     , HIRE_DATE
  FROM EMPLOYEES
 WHERE (JOB_ID,SALARY) IN (
    SELECT JOB_ID, MIN(SALARY)
      FROM EMPLOYEES
     GROUP BY JOB_ID
);

--A-6-2
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;

SELECT FIRST_NAME || ' ' || LAST_NAME "NAME"
     , SALARY
     , DEPARTMENT_ID
     , JOB_ID
  FROM EMPLOYEES E
 WHERE SALARY > (
    SELECT AVG(NVL(SALARY, 0))
      FROM EMPLOYEES
      WHERE DEPARTMENT_ID=E.DEPARTMENT_ID
);


--A-6-3
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;
-- 강사답
SELECT 
    E.EMPLOYEE_ID,
    E.FIRST_NAME || ' ' || E.LAST_NAME AS "NAME",
    E.JOB_ID,
    E.HIRE_DATE
FROM 
    EMPLOYEES E
WHERE 
    E.DEPARTMENT_ID IN (
        SELECT D.DEPARTMENT_ID
        FROM DEPARTMENTS D
        WHERE D.LOCATION_ID IN (
            SELECT L.LOCATION_ID
            FROM LOCATIONS L
            WHERE L.CITY LIKE 'O%'
        )
    );


SELECT EMPLOYEE_ID
       ,FIRST_NAME || ' ' || LAST_NAME "NAME" 
       ,JOB_ID
       ,HIRE_DATE
    FROM EMPLOYEES E
    JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
    JOIN LOCATIONS L
    ON D.LOCATION_ID=L.LOCATION_ID
    WHERE L.CITY LIKE 'O%';

--A-6-4
-- 부서별 평균연봉
-- 사원  이름성, 업무, 급여, 부서번호, 
-- JOIN 부서 테이블

SELECT 
       FIRST_NAME || ' ' || LAST_NAME "NAME"
     , JOB_ID
     , SALARY
     , DEPARTMENT_ID
     , (
    SELECT AVG(NVL(SALARY, 0))
      FROM EMPLOYEES E1
     WHERE E1.DEPARTMENT_ID = E.DEPARTMENT_ID
     GROUP BY DEPARTMENT_ID
)  AS "DEPARTMENT AVG SALARY"  FROM EMPLOYEES E;
  
 
 --A-7-- 
SELECT EMPLOYEE_ID
,JOB_ID
FROM EMPLOYEES
UNION
SELECT EMPLOYEE_ID
,JOB_ID
FROM JOB_HISTORY;
 
--A-7-1
 SELECT EMPLOYEE_ID
              , START_DATE
              , END_DATE
              , JOB_ID
              , DEPARTMENT_ID
  FROM JOB_HISTORY 
  ORDER BY 1;

-- 강사답
SELECT EMPLOYEE_ID
,JOB_ID
,DEPARTMENT_ID
FROM EMPLOYEES
UNION ALL
SELECT EMPLOYEE_ID
,JOB_ID
,DEPARTMENT_ID
FROM JOB_HISTORY
ORDER BY 1;
  
-- A--7--2
SELECT E.EMPLOYEE_ID, E.JOB_ID
  FROM EMPLOYEES E
  LEFT JOIN JOB_HISTORY J ON E.EMPLOYEE_ID = J.EMPLOYEE_ID
  WHERE J.EMPLOYEE_ID IS NULL;

SELECT 
    E.EMPLOYEE_ID,
    E.JOB_ID
FROM 
    EMPLOYEES E
JOIN 
    JOB_HISTORY JH
ON 
    E.EMPLOYEE_ID = JH.EMPLOYEE_ID
WHERE 
    E.JOB_ID = JH.JOB_ID;


SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
INTERSECT
SELECT EMPLOYEE_ID, JOB_ID
FROM JOB_HISTORY;

SELECT * FROM JOB_HISTORY;
--A-7-2-1

    SELECT EMPLOYEE_ID, JOB_ID
    FROM EMPLOYEES
    INTERSECT
    SELECT EMPLOYEE_ID, JOB_ID,START_DATE,END_DATE
    FROM JOB_HISTORY;

-- 첫 번째 SELECT 쿼리
SELECT 
    JH.EMPLOYEE_ID,
    JH.JOB_ID,
    NULL AS START_DATE, -- NULL을 표시할 열
    NULL AS END_DATE    -- NULL을 표시할 열
FROM 
    JOB_HISTORY JH
WHERE 
    JH.EMPLOYEE_ID = 176

UNION ALL

-- 두 번째 SELECT 쿼리
SELECT 
    JH.EMPLOYEE_ID,
    JH.JOB_ID,
    JH.START_DATE,
    JH.END_DATE
FROM 
    JOB_HISTORY JH
WHERE 
    JH.EMPLOYEE_ID = 176

ORDER BY 
    START_DATE;



--A-7-3
SELECT E.EMPLOYEE_ID
  FROM EMPLOYEES E
  LEFT JOIN JOB_HISTORY J ON E.EMPLOYEE_ID = J.EMPLOYEE_ID
  WHERE J.EMPLOYEE_ID IS NULL;
