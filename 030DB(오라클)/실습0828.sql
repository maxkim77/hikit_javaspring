/*실습 0822 1~14번*/
-- 1번 모든 도서의 이름과 가격을 검색하시오.
SELECT BOOKNAME
     , PRICE
  FROM BOOK;
-- 1-1번 모든 도서의 가격과 이름을 검색하시오.

SELECT PRICE
     , BOOKNAME
  FROM BOOK;
  
-- 2번 모든 도서테이블의 컬럼을 검색하시오

SELECT *
  FROM BOOK;

-- 3번 모든 출판사를 검색

SELECT PUBLISHER
  FROM BOOK;

-- 3-*

SELECT DISTINCT PUBLISHER
  FROM BOOK;
  
-- 4번 가격이 20000미만 도서 검색

SELECT *
  FROM BOOK
 WHERE PRICE < 20000;

--5번

SELECT *
  FROM BOOK
 WHERE PRICE >= 10000 AND PRICE <= 20000;

SELECT *
  FROM BOOK
 WHERE PRICE BETWEEN 10000 AND 19999;

-- 6번

SELECT *
  FROM BOOK
 WHERE PUBLISHER IN (
    '굿스포츠'
  , '대한미디어'
); 
-- 6-*

SELECT *
  FROM BOOK
 WHERE PUBLISHER NOT IN (
    '굿스포츠'
  , '대한미디어'
);

SELECT *
  FROM BOOK
 WHERE NOT ( PUBLISHER = '굿스포츠' OR PUBLISHER = '대한미디어' );

SELECT *
  FROM BOOK
 WHERE PUBLISHER <> '굿스포츠' AND PUBLISHER <> '대한미디어';

-- 7번

SELECT BOOKNAME
     , PUBLISHER
  FROM BOOK
 WHERE BOOKNAME = '축구의 역사';

-- 8번

SELECT BOOKNAME
     , PUBLISHER
  FROM BOOK
 WHERE BOOKNAME LIKE '축구%';

-- 9번

SELECT *
  FROM BOOK
 WHERE BOOKNAME LIKE '_구%';

--10번

SELECT *
  FROM BOOK
 WHERE PRICE >= 20000 AND BOOKNAME LIKE '%축구%';


--11번

SELECT *
  FROM BOOK
 WHERE PUBLISHER IN (
    '굿스포츠'
  , '대한미디어'
);

-- 12번

SELECT *
  FROM BOOK
 ORDER BY BOOKNAME;

-- 13번

SELECT *
  FROM BOOK
 ORDER BY PRICE
        , BOOKNAME;

-- 14번

SELECT *
  FROM BOOK
 ORDER BY PRICE DESC
        , PUBLISHER;
-- 15번 고객이 주문한 도서의 총판매액

SELECT SUM(SALEPRICE)
  FROM ORDERS;

SELECT SUM(SALEPRICE) "총매출"
  FROM ORDERS;

-- 16번 

SELECT SUM(SALEPRICE) "총매출"
  FROM ORDERS
 WHERE CUSTID = 2;   

-- 16--2 김연아가 UNIQUE

SELECT SUM(SALEPRICE) "총매출"
  FROM ORDERS
 WHERE CUSTID = (
    SELECT CUSTID
      FROM CUSTOMER
     WHERE NAME = '김연아'
);

-- 17번

SELECT SUM(SALEPRICE)     "TOTAL"
     , AVG(SALEPRICE)     "AVERAGE"
     , MIN(SALEPRICE)     "MINIMUM"
     , MAX(SALEPRICE)     "MAXIMUM"
  FROM ORDERS;

-- 18번

SELECT COUNT(*)
  FROM ORDERS;
-- 19번

SELECT CUSTID
     , COUNT(*)           "도서수량"
     , SUM(SALEPRICE)     "총액"
  FROM ORDERS
 GROUP BY CUSTID;

-- 20번까지만  
-- 가격 8000원이상
-- 고객별 주문의 도서 총수량

SELECT CUSTID
     , COUNT(*) AS "도서수량"
  FROM ORDERS
 WHERE SALEPRICE >= 8000
HAVING COUNT(CUSTID) >= 2
GROUP  BY CUSTID;

--21
SELECT *
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID;

SELECT *
FROM CUSTOMER C
, ORDERS O
WHERE C.CUSTID=O.CUSTID;
  
-- 22번 
 SELECT *
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID
 ORDER BY 1;

SELECT *
FROM CUSTOMER C
, ORDERS O
WHERE C.CUSTID=O.CUSTID
ORDER BY 1; 
 
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;
--  문제 23
SELECT C.NAME
     , B.PRICE
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID
  JOIN BOOK B ON O.BOOKID = B.BOOKID;
  
SELECT NAME
     , PRICE
  FROM CUSTOMER 
     , BOOK
     , ORDERS
  WHERE CUSTOMER.CUSTID = ORDERS.CUSTID
  AND ORDERS.BOOKID = BOOK.BOOKID;  
  
-- 문제 24
SELECT * FROM BOOK;
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMER;

SELECT C.NAME, SUM(O.SALEPRICE)
FROM CUSTOMER C
JOIN ORDERS O ON C.CUSTID = O.CUSTID
GROUP BY C.NAME;

SELECT C.NAME, SUM(O.SALEPRICE)
FROM CUSTOMER C
,ORDERS O
WHERE C.CUSTID=O.CUSTID
GROUP BY C.NAME, C.CUSTID ORDER BY 1;

-- 25
SELECT * FROM BOOK;
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMER;

SELECT C.NAME, B.BOOKNAME
FROM CUSTOMER C
JOIN ORDERS O ON C.CUSTID = O.CUSTID
JOIN BOOK B ON O.BOOKID = B.BOOKID;

SELECT C.NAME
       ,B.BOOKNAME
FROM  CUSTOMER C
     ,ORDERS O
     ,BOOK B
WHERE C.CUSTID=O.CUSTID
AND   B.BOOKID=O.BOOKID;

-- 26
SELECT C.NAME, B.BOOKNAME
FROM CUSTOMER C
JOIN ORDERS O ON C.CUSTID = O.CUSTID
JOIN BOOK B ON O.BOOKID = B.BOOKID
WHERE B.PRICE = 20000;

SELECT C.NAME, B.BOOKNAME
FROM   CUSTOMER C
       ,ORDERS O
       ,BOOK B
WHERE C.CUSTID=O.CUSTID AND O.BOOKID=B.BOOKID AND B.PRICE =20000;

SELECT C.NAME, B.BOOKNAME
FROM CUSTOMER C, BOOK B
WHERE
    C.CUSTID IN (
        SELECT O.CUSTID
          FROM ORDERS O
         WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000
    ) AND B.BOOKID
IN

( SELECT O.BOOKID
  FROM ORDERS O
 WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000
);

SELECT C.NAME
     , B.BOOKNAME
  FROM CUSTOMER  C
     , BOOK      B
 WHERE C.CUSTID IN (
    SELECT O.CUSTID
      FROM ORDERS O
     WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000
) AND B.BOOKID IN (
    SELECT O.BOOKID
      FROM ORDERS O
     WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000
);  
-- 20000원 짜리 데이터가 다중행일 수잇으므로 20000

SELECT CUSTOMER.NAME
,BOOK.BOOKNAME
FROM CUSTOMER 
JOIN ORDERS
ON CUSTOMER.CUSTID=ORDERS.CUSTID
JOIN BOOK
ON ORDERS BOOK ID = BOOK.BOOKID

WHERE ORDERS BOOIK IK IN
(SELECT O.BOOKID
      FROM BOOK
     WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000)
;

SELECT * FROM STUDENT S JOIN SUBJECT B
ON S.SUBJECT_ID = B. SUBJECT_ID;
SELECT * FROM SUBJECT;


SELECT C.NAME, B.BOOKNAME
FROM CUSTOMER C, BOOK B
WHERE C.CUSTID IN (
    SELECT O.CUSTID 
    FROM ORDERS O 
    WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000
) AND B.BOOKID IN (
    SELECT O.BOOKID 
    FROM ORDERS O 
    WHERE O.BOOKID = B.BOOKID AND B.PRICE = 20000
);

-- 27번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT C.NAME, O.SALEPRICE
FROM   CUSTOMER C 
       ,ORDERS O 
WHERE C.CUSTID=O.CUSTID(+);

SELECT C.NAME, O.SALEPRICE
FROM   CUSTOMER C 
LEFT OUTER JOIN   ORDERS O 
ON C.CUSTID=O.CUSTID;

-- 28번
SELECT BOOKNAME 
FROM BOOK
WHERE PRICE = (SELECT MAX(PRICE) FROM BOOK);

-- 29번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT * FROM CUSTOMER;

SELECT C.NAME
FROM CUSTOMER C
JOIN ORDERS O
ON C.CUSTID=O.CUSTID
GROUP BY C.NAME;
-- 강사답
SELECT DISTINCT NAME
FROM CUSTOMER
WHERE CUSTID IN (SELECT CUSTID FROM ORDERS);

SELECT DISTINCT NAME
FROM CUSTOMER C
,ORDERS O
WHERE C.CUSTID=O.CUSTID;

-- 30번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT C.NAME
FROM CUSTOMER C
JOIN ORDERS O
ON C.CUSTID=O.CUSTID
JOIN BOOK B
ON B.BOOKID=O.BOOKID
WHERE PUBLISHER ='대한미디어';

SELECT NAME
  FROM CUSTOMER C
 WHERE C.CUSTID IN (
    SELECT O.CUSTID
      FROM ORDERS  O
         , BOOK    B
     WHERE B.BOOKID = O.BOOKID AND B.PUBLISHER = '대한미디어'
);
-- 
서브쿼리
SELECT NAME
  FROM CUSTOMER 
 WHERE CUSTID IN ( SELECT CUSTID
                    FROM ORDERS
                   WHERE BOOKID
                  IN

                  (
                      SELECT BOOKID
                        FROM BOOK
                       WHERE PUBLISHER = '대한미디어'
                  ));

-- 31번
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

-- 출판사별로 출판사의 평균 도서 평균가격보다 비싼도서

SELECT B1.BOOKNAME
FROM   BOOK B1
WHERE PRICE > (SELECT AVG(B2.PRICE)
FROM BOOK B2
WHERE B2.PUBLISHER=B1.PUBLISHER);

-- 강사답
SELECT B1.BOOKNAME
  FROM BOOK B1
     , (
        SELECT PUBLISHER
             , AVG(PRICE) AS PRICE
        FROM BOOK
     GROUP BY PUBLISHER
) B2
 WHERE B1.PUBLISHER = B2.PUBLISHER AND B1.PRICE > B2.PRICE;

SELECT B1.BOOKNAME
  FROM BOOK B1
  JOIN (
    SELECT PUBLISHER
         , AVG(PRICE) AS PRICE
      FROM BOOK
     GROUP BY PUBLISHER
) B2 ON B1.PUBLISHER = B2.PUBLISHER
 WHERE B1.PRICE > B2.PRICE;

SELECT BOOKNAME
FROM BOOK B
WHERE PRICE > (
    SELECT AVG(B2.PRICE)
    FROM BOOK B2
    WHERE B2.PUBLISHER = B.PUBLISHER
    GROUP BY B2.PUBLISHER
);

-- 32번까지
-- 도서를 주문하지 않은 고객의 이름

SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;

SELECT C.NAME
FROM CUSTOMER C 
LEFT OUTER JOIN ORDERS O
ON C.CUSTID=O.CUSTID
WHERE O.CUSTID IS NULL;

SELECT C.NAME
FROM CUSTOMER C 
, ORDERS O
WHERE C.CUSTID=O.CUSTID(+)
AND O.CUSTID IS NULL;


SELECT C.NAME
  FROM CUSTOMER C
 WHERE C.CUSTID NOT IN (
    SELECT O.CUSTID
      FROM ORDERS O);

SELECT NAME FROM CUSTOMER
MINUS
SELECT DISTINCT NAME
FROM CUSTOMER C
,ORDERS O
WHERE C.CUSTID=O.CUSTID;

SELECT DISTINCT CUSTOMER.NAME
  FROM CUSTOMER
  JOIN ORDERS ON CUSTOMER.CUSTID = ORDERS.CUSTID;
-- not 을 where절에 안쓰는 것이 가독성이 좋음.


-- 33번까지
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
SELECT * FROM BOOK;
-- 주문이있는 고객의 이름과 주소를 보이시오

SELECT C.NAME, C.ADDRESS
FROM   CUSTOMER C
JOIN   ORDERS O
ON     C.CUSTID=O.CUSTID
GROUP BY C.NAME, C.ADDRESS;  

SELECT NAME, ADDRESS FROM CUSTOMER C
WHERE EXISTS (SELECT * FROM ORDERS O WHERE C.CUSTID=O.CUSTID); 
--34번까지

CREATE TABLE NewBook(
     bookid    NUMBER
    ,bookname  VARCHAR2(20)
    ,publisher VARCHAR2(20)
    ,price     NUMBER
);
-- 계산하지 않는 것은 varchar2
-- NUMBER 는 001이 안되기때문


CREATE TABLE NewCustomer(
    custid   NUMBER PRIMARY KEY
    ,name     VARCHAR2(40)
    ,address  VARCHAR2(40)
    ,phone    VARCHAR2(30)
);

CREATE TABLE NewOrders(
    orderid NUMBER PRIMARY KEY
    ,custid NUMBER REFERENCES NewCustomer(custid) ON DELETE CASCADE NOT NULL 
    ,bookid NUMBER NOT NULL
    ,saleprice NUMBER
    ,orderdate DATE
);

--37번
ALTER TABLE NewBook ADD isbn VARCHAR2(13);
DESC NewBook;

-- 38번
ALTER TABLE NewBook MODIFY isbn NUMBER;
DESC NewBook;
-- 39번
ALTER TABLE NewBook DROP COLUMN ISBN;
DESC NewBook;

-- 40번
ALTER TABLE NewBook 
ADD CONSTRAINT NB_BI_NN NOT NULL(bookid);

ALTER TABLE NewBook
MODIFY (bookid NOT NULL);
-- 41번

ALTER TABLE NewBook
MODIFY (bookid PRIMARY KEY);
-- 42
DROP TABLE NewBook;

--43번
DROP TABLE NewOrders;
DROP TABLE NewCustomer;

--44번
DESC BOOK;

INSERT INTO BOOK(BOOKID,BOOKNAME,PUBLISHER,PRICE)
VALUES(11,'스포츠 의학','한솔의학서적',90000);
COMMIT;
INSERT INTO BOOK(BOOKID,BOOKNAME,PUBLISHER)
VALUES(14,'스포츠 의학','한솔의학서적');
COMMIT;
SELECT * FROM IMPORTED_BOOK;

INSERT INTO BOOK
SELECT * FROM IMPORTED_BOOK;

UPDATE CUSTOMER SET ADDRESS ='대한민국 부산' WHERE CUSTID=5;

UPDATE CUSTOMER
   SET
    ADDRESS = (
        SELECT ADDRESS
          FROM CUSTOMER
         WHERE NAME = '김연아'
    )
 WHERE NAME = '박세리';
 
 COMMIT;
 
SELECT * FROM CUSTOMER;
-- 48번까지

-- 문제1
SELECT ABS(-78) FROM DUAL;
SELECT ABS(+78) FROM DUAL;

--문제2
SELECT ROUND(4.875,1) FROM DUAL;

SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;

--문제3 
-- AVG 쓸때 NVL
 SELECT C.CUSTID     AS "고객번호"
     , ROUND(AVG(NVL(O.SALEPRICE,0)),0)  AS "평균금액"
  FROM CUSTOMER C
  JOIN ORDERS O
  ON C.CUSTID = O.CUSTID
 GROUP BY C.CUSTID;
 
 --문제4
 
select * from book;

UPDATE BOOK SET BOOKNAME=REPLACE(BOOKNAME,'야구','농구')
WHERE BOOKNAME LIKE '%야구%';
COMMIT;
SELECT * FROM BOOK;

-- 문제5
SELECT BOOKNAME
     , LENGTH(BOOKNAME) "글자수"
     , LENGTHB(BOOKNAME) "바이트수"
  FROM BOOK
 WHERE PUBLISHER = '굿스포츠';
 
 --문제 6
 
 SELECT * FROM CUSTOMER;
 
 
SELECT SUBSTR(NAME,1,1) "성", COUNT(*) "인원" FROM CUSTOMER
GROUP BY SUBSTR(NAME,1,1);

SELECT * FROM ORDERS;
-- 문제 7
SELECT ORDERID         "주문번호"
     , ORDERDATE       "주문일"
     , ORDERDATE + 10    "확정일자"
  FROM ORDERS;

-- 문제 8
SELECT ORDERID                                  "주문번호"
     , TO_CHAR(ORDERDATE, 'YYYY-MM-DD DY')      "주문일"
     , CUSTID                                   "고객번호"
     , BOOKID                                   "도서번호"
  FROM ORDERS
 WHERE ORDERDATE >= TO_DATE(20140707, 'YYYYMMDD')
 AND ORDERDATE <TO_DATE(20140708, 'YYYYMMDD');
-- 문제9
SELECT SYSDATE
     , TO_CHAR(SYSDATE, 'YYYY/MM/DD DY HH:MI:SS') "SYSDATE_1"
  FROM DUAL;
  
--문제10
SELECT NAME
     , NVL(PHONE, '연락처없음')
  FROM CUSTOMER;  
  
-- 문제11

SELECT * FROM CUSTOMER;

SELECT CUSTID "순번", CUSTID, NAME, PHONE FROM CUSTOMER
WHERE CUSTID BETWEEN '1' AND '2';

SELECT ROWNUM "순번", CUSTID, NAME, PHONE FROM CUSTOMER
WHERE ROWNUM <3;

/*
RowID는 해당 되는 ROW의 위치 즉 주소
ROWNUM은 SELECT가 된 번호안에서 번호가 있음

*/

SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
-- 문제 12
SELECT C.NAME
     , SUM(O.SALEPRICE)
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID
 GROUP BY C.NAME;

-- 스칼라 서브쿼리 : 서브쿼리가 칼럼 자리에 들어가는것

SELECT C.NAME, SUM(O.SALEPRICE)
FROM   CUSTOMER C
,      ORDERS O
WHERE  C.CUSTID = O.CUSTID
GROUP BY C.NAME;

SELECT 
    (SELECT C.NAME 
     FROM CUSTOMER C 
     WHERE C.CUSTID = O.CUSTID) AS NAME,
    SUM(O.SALEPRICE) AS TOTAL_SALEPRICE
FROM ORDERS O
GROUP BY O.CUSTID;



SELECT NAME
FROM CUSTOMER C
WHERE ???=C.CUSTID;


SELECT C.NAME, 
       (SELECT MAX(O.SALEPRICE)
        FROM ORDERS O
        WHERE O.CUSTID = C.CUSTID) AS LATEST_ORDER_PRICE,
       SUM(O.SALEPRICE) AS TOTAL_SALEPRICE
FROM   CUSTOMER C
JOIN   ORDERS O ON C.CUSTID = O.CUSTID
GROUP BY C.NAME;

 
 -- 문제 13

SELECT O.*
     , B.BOOKNAME
  FROM ORDERS O
  JOIN BOOK B
  ON O.ORDERID=B.BOOKID;
-- 문제14
SELECT C.NAME
     , SUM(O.SALEPRICE)
  FROM CUSTOMER C
  JOIN ORDERS O ON C.CUSTID = O.CUSTID
  WHERE O.CUSTID<=2
  GROUP BY C.NAME;
  
--문제15

SELECT ORDERID
     , SALEPRICE
  FROM ORDERS
 WHERE SALEPRICE < (
    SELECT AVG(NVL(SALEPRICE,0))
      FROM ORDERS
);

-- 문제 16
-- 다시
SELECT O.ORDERID
     , O.CUSTID
     , O.SALEPRICE
FROM  ORDERS O
WHERE O.SALEPRICE > (
      SELECT AVG(O2.SALEPRICE)
      FROM     ORDERS O2
      WHERE O.CUSTID = O2.CUSTID
      GROUP BY O2.CUSTID
);
--강사답
SELECT O.ORDERID
     , O.CUSTID
     , O.SALEPRICE
FROM  ORDERS O
WHERE O.SALEPRICE > (
      SELECT AVG(O2.SALEPRICE)
      FROM     ORDERS O2
      WHERE O.CUSTID = O2.CUSTID
);

--17번

SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;

SELECT SUM(SALEPRICE) "total"
FROM CUSTOMER C
JOIN ORDERS O 
ON C.CUSTID=O.CUSTID
WHERE C.ADDRESS LIKE '대한민국%';
--강사답
SELECT SUM(SALEPRICE) "total"
FROM ORDERS O
WHERE O.CUSTID IN
(SELECT C. CUSTID
FROM CUSTOMER C
WHERE C.CUSTID=O.CUSTID
AND C.ADDRESS LIKE '대한민국%');



--18번
SELECT ORDERID
     , SALEPRICE
  FROM ORDERS
 WHERE SALEPRICE > (
    SELECT MAX(SALEPRICE)
      FROM ORDERS
     WHERE CUSTID = 3
);

-- 문제19
SELECT SUM(O.SALEPRICE) "total"
  FROM ORDERS O
 WHERE EXISTS (
    SELECT 1
      FROM CUSTOMER C
     WHERE C.CUSTID = O.CUSTID AND C.ADDRESS LIKE '대한민국%'
);

SELECT SUM(O.SALEPRICE) "total"
  FROM ORDERS O
 WHERE EXISTS (
    SELECT *
      FROM CUSTOMER C
     WHERE O.CUSTID = C.CUSTID AND C.ADDRESS LIKE '대한민국%'
);

-- practice

SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;
--문제16
--주문번호, 고객ㄱ번호, 금액
-- 주문테이블
-- 각고객의 평균 주문금액 < 금액의 주문내역
SELECT O.ORDERID
     , O.CUSTID
     , O.SALEPRICE
FROM  ORDERS O
WHERE O.SALEPRICE > (
      SELECT AVG(O2.SALEPRICE)
      FROM     ORDERS O2
      GROUP BY O2.CUSTID
);

SELECT * FROM CUSTOMER;


















